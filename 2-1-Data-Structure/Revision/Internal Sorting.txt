SELECT-SORT (A[1..n])			//  not stable
for (i = 1 to n - 1)
	k = i
	for (j = i + 1 to n)
		if (A[j] < A[k])
			k = j
	swap (A[i], A[k])

// TOURNAMENT-SORT			//  stable
//  select winner from two child, and winner of winners until one win
//  next turn set the pre winner inf and go on
//  require O (n) external space

// TREE-SORT
//  build a binary search tree and then get from in-order traversal

INSERTION-SORT (A[1..n])		//  stable
for (i = 2 to n)
	A[0] = A[i]			//  sentinel
	j = i
	while (A[j - 1] > A[0])
		A[j] = A[j - 1]
		j--
	A[j] = A[0]

// BINARY-INSERTION-SORT		//  stable
//  binary search for index to insert before moving data

SHELL-SORT (A[1..n])			//  not stable
GAP[1..m] = ProduceIncrementFrom (n)	//  Ensure GAP[m] == 1
for (d = 1 to m)
	for (i = GAP[d] + 1 to n)	//  sort GAP[d] groups in turn
		temp = A[i]
		j = i
		while (A[(j - GAP[d])] > temp && j >= GAP[d])
			A[j] = A[(j - INC[d])]
		A[j] = temp

NAIVE-BUBBLE-SORT (A[1..n])		//  stable
for (k = 1 to n)
	for (i = k + 1 to n)
		if (A[i] > A[i - 1])
			swap (A[i], A[i - 1])

IMPROVED-BUBBLE-SORT (A[1..n])		//  stable
flag = false
L = 1
R = n
while (L < R && flag == false)
	flag = true
	for (i = L to R - 1)
		if (A[i] > A[i + 1])
			swap (A[i], A[i + 1])
			flag = false
	R--				//  A[R] is max
	for (i = R downto L + 1)
		if (A[i] < A[i - 1])
			swap (A[i], A[i - 1])
			flag = false
	L++				//  A[L] is min

NAIVE-QUICK-SORT (A[1..n], L, R)	//  stable
//  initial calling: QUICK-SORT (A, 1, n)
if (L >= R)
	return
PIVOT = A[L]
i = L
j = R
while (i < j)				//  implicit swapping
	while (i < j && A[j] >= PIVOT)
		j--
	A[i] = A[j]
	while (i < j && A[i] <= PIVOT)
		i++
	A[j] = A[i]
A[i] = PIVOT
QUICK-SORT (A, L, i - 1)
QUICK-SORT (A, i + 1, R)

// IMPROVED-QUICK-SORT			//  not stable
//  PIVOT = MEDIAN3 (A[L], A[(L+R)/2], A[R])
//  via swapping, ensure A[L] <= A[(L+R)/2] <= A[R]
//  inner-while needn't care about i < j as MEDIAN3 setting sentinels

HEAP-SORT (A[1..n])			//  not stable
for (i = n / 2 downto 1)
	PERCOLATE-DOWN (A, i, n)
for ((i = N downto 2)
	swap (A[1], A[i])
	PERCOLATE-DOWN (A, 1, i - 1)

PERCOLATE-DOWN (A[1..n], i, n)		//  build max heap
child = 2 * i				//  left-child = 2i
key = A[i]
while (child <= n)
	if (child < n && A[child] < A[child + 1])
		child++			//  right-child = 2i + 1
	if (key < A[child])
		A[i] = A[child]
		i = child
		child = 2 * i
	else				//  key >= i's max child
		break
A[i] = key				//  settle key at i's position

MERGE-SORT (A[1..n], L, R)		//  stable
//  initial calling: MERGE-SORT (A, 1, n)
if (L >= R)
	return
MERGE-SORT (A, L, (L + R) / 2)
MERGE-SORT (A, (L + R) / 2, R)
MERGE (A, L, (L + R) / 2, R)

MERGE (A[1..n], L, R, endR)
endL = R - 1				//  Left = A[L..endL]
TMP[1..(endR - L + 1)]			//  Right = A[R..endR]
t = 1
i = L
j = R
while (i <= endL && j <= endR)		//  merge Left & Right
	if (A[i] <= A[j])
		TMP[t] = A[i]
		i++
	else
		TMP[t] = A[j]
		j++
	t++
while (i <= endL)			//  simply copy rest of left
	TMP[t] = A[i]
	i++
	t++
while (j <= endR)			//  simply copy rest of right
	TMP[t] = A[j]
	j++
	t++
t = 1
for (i = L to endR)			//  copy back from temp
	A[i] = TMP[t]

// Linear Time sortings:
//  COUNTING-SORT			//  not stable
//  BUCKET-SORT				//  stable
//  RADIX-SORT				//  stable